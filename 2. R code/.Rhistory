m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(3, 1, 0,
5, -2, -1,
4, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(-3, 2, 1, 1, -1. -1, 5, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
entries <- c(-3, 2, 1,
1, -1, -1,
5, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(1, -3, -1, -2, 6, -3)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(1, 3, 4, 2, 5, 8, -1, 4, 6)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(7,5, 1, -3, -13, 2)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(3, 0, 2, -1, 4, 4, 2, 1, 7)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(3, 1, 0, 5, -2, -1, 4, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(8, 1, 0, -1, -3, 2)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(-1, 3, 1, 4, -3, -1, 3, 0, 5)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(4, 3, -5, -1, 5, 7, 3, -2,-7)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(6, -9, -4, 6)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(2, -1, 0, 1, 0, 1, -3, 4, 5)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(1, -2, 0, -3, 3, 2, 1, 6)
m <- matrix(entries,nrow=2,byrow=T)
m
rref(m)
library("pracma")
A <- matrix(c(1,3,2,4,2,-1,0,3,5),nrow=3,byrow=T)
A
B <- matrix(c(7,-3,2,0,4,5,2,-1,-4),nrow=3,byrow=T)
B
A + B
B - A
A %*% B  # Not A * B!
A
t(A)
entries <- c(1,-2,1,
-3,7,-6,
2,-3,0)
A <- matrix(entries,nrow=3,byrow=T)
A
inv(A)
A %*% inv(A)
round(A %*% inv(A))  # Fix the round-off
solve(A)
library("pracma")
entries <- c(-3,1,2,
6,2,-5,
9,5,-6)
A <- matrix(entries,nrow=3,byrow=T)
A
lu(A)
A <- matrix(c(.65, .2, .35, .8),nrow=2,byrow=T)
A
x <- c(1,0)
x
for (i in 1:10) { # start with 10 iterations
x <- A %*% x
print(x)
}
x <- c(1,0) # reset initial state vector
x <- c(1,0) #initial state
x
x <- c(1,0) # reset initial state vector
for (i in 1:20) { # 20 iterations
x <- A %*% x
print(x)
}
A <- matrix(c(.1, .9, .15, .85),nrow=2,byrow=T)
A
A <- matrix(c(.1, .15, .9, .85),nrow=2,byrow=T)
A
x <- c(1,0) #initial state
x
for (i in 1:6) { # start with 10 iterations
x <- A %*% x
print(x)
}
library("pracma", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
entries <- c(1, -2, 2, 0, -2, 5, -7, 0)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
library("pracma")
entries = c(0,0,6,0,19,11,-27,
3,12,9,-6,26,31,-63,
1,4,3,-2,10,9,-17,
-1,-4,-4,2,-13,-11,22)
m <- matrix(entries,nrow=4,byrow=T)
m
ncol(m) # The number of columns of m
Rank(m)   # The rank of m
nullspace(m) # Basis for null space, given as matrix
ncol(nullspace(m)) # The nullity
entries <- c(1,1,2,-5,0,
4,4,-5,2,-8,
0,2,-1,0,6,
3,-1,1,4,5,
5,3,2,-4,7)
m <- matrix(entries,nrow=5,byrow=T)
m
det(m)
m <- matrix(c(0,1,1,1,0,1,1,1,0), nrow=3, byrow=TRUE) # sample matrix
eigen(m)  # The eigenvalues and eigenvectors
m
eigen(m)  # The eigenvalues and eigenvectors
a1 = c(-3, 1, -2, 9, -2, 2, 4, -7, 1)
m <- matrix(a1,nrow=3,byrow=T)
m
det(m)
a2 = c(1, -3, -2, 3, 9, 2, 6, 4, -1)
m <- matrix(a2,nrow=3,byrow=T)
m
det(m)
a3 = c(1, 1, -3, 3, -2, 9, 2, -7, 4)
m <- matrix(a3,nrow=3,byrow=T)
m
det(m)
a = c(1, 1, -2, 3, -2, 2, 6, -7, -1)
m <- matrix(a,nrow=3,byrow=T)
m
det(m)
a = c(3, 0, 2, 0, 3, 2, 2, 3, 1)
m <- matrix(a,nrow=3,byrow=T)
m
det(m)
a2 = c(3, 1, 2, 0, 3, 2, 2, -4, 1)
m <- matrix(a2,nrow=3,byrow=T)
m
det(m)
scalingfactor <- function(v) {
if (abs(max(v)) >= abs(min(v))) {
return(max(v))
} else {
return(min(v))
}
}
m <- matrix(c(3,-1,2,3,-1,6,-2,2,-2), nrow=3, byrow=TRUE) # sample matrix
m
x <- c(1,1,1)  # The initial vector
for (i in 1:20){
s <- scalingfactor(m %*% x)
x <- (m %*% x)/s
print(c("Eigenvalue: ",s))
print(c("Eigenvector:",x))
}
eigen(m)
eigen(m)$values[1]  # Gives dominant eigenvalue
eigen(m)$vectors[,1]/scalingfactor(eigen(m)$vectors[,1])
P = eigen(m)$vectors  # define P, columns of eigenvectors
P
D = diag(eigen(m)$values)  # define D, diagonal entries of eigenvalues
D
P %*% D %*% solve(P)
update.packages(ask = FALSE, checkBuilt = TRUE)
setwd("~/Desktop/iXperience/DataScienceGreen/2. R code")
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
getwd()
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
install.packages(writexl)
library(readr)
library(readxl)
library(writexl)
install.packages("writexl")
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
airbnb_baseR <- read.csv("data/airbnb_capetown.csv")
airbnb_baseR
class(airbnb_baseR$name)
airbnb_baseR$name = as.character(airbnb_baseR$name)
class(airbnb_baseR$host_name)
airbnb_baseR$host_name = as.character(airbnb_baseR$host_name)
names(airbnb_baseR)
class(airbnb_baseR$city)
airbnb_baseR$city = as.character(airbnb_baseR$city)
class(airbnb_baseR$neighbourhood)
airbnb_baseR$neighbourhood = as.character(airbnb_baseR$neighbourhood)
summary(airbnb_baseR)
summary(airbnb_baseR)$class
summary(airbnb_baseR)$class()
summary(airbnb_baseR).class
airbnb_baseR <- read.csv("data/airbnb_capetown.csv", stringsAsFactors = F)
str(airbnb_baseR)
airbnb_tidy <- read_csv("data/airbnb_capetown.csv")
airbnb_tidy
summary(airbnb_tidy)
airbnb_clean <- airbnb_tidy %>% select(name, city, price)
airbnb_clean
write_csv(airbnb_clean, path = "my_airbnb_data.csv")
x <- 3
y <- 5
save(results, x, y, file = "a-few-variables.rda")
results = []
results = 0
x <- 3
y <- 5
save(results, x, y, file = "a-few-variables.rda") #does not work for me. Results not found.
saveRDS(x, file = "a-single-variable.rds")
results
results = c(1,2,4)
save(results, x, y, file = "a-few-variables.rda") #does not work for me. Results not found.
saveRDS(x, file = "a-single-variable.rds")
rm(results, x, y)
z <- readRDS("a-single-variable.rds")
load("a-few-variables.rda")
install.packages("gapminder")
load(gapminder)
library(gapminder)
gapminder[1:5]
select(gapminder, country, year, pop)
select(gapminder, continent, pop)
gapminder[-5]
gapminder[-2]
arrange(gapminder, lifeExp)
le = arrange(gapminder, lifeExp)
le[1]
le[1,c(1,3)]
len(gapminder)
length(gapminder)
le[1704, c(1, 3)]
filter(gapminder, year==2007)
filter(gapminder, year==2007&population<=999999)
filter(gapminder, year==2007 & pop<=999999)
filter(gapminder, continents!="Asia")
filter(gapminder, continent!="Asia")
filter(gapminder, continent!=Asia | lifeExp < 30)
filter(gapminder, continent!="Asia" | lifeExp < 30)
filter(gapminder, continent=="Africa" & year==2005)
names(gapminder)
mutate(gapminder, tot_gdp = gdpPercap * pop)
mutate(gapminder, tot_gdp = (gdpPercap * pop)/1000000)
mean(gapminder$lifeExp)
per_C = group_by(gapminder, country)
summarise(per_C, life_exp_country = mean(lifeExp))
x = summarise(per_C, life_exp_country = mean(lifeExp))
min(x)
per_y = group_by(gapminder, year)
summarise(per_y, mean_life_exp_per_year = mean(lifeExp))
filter(gapminder, countinent=="Africa" & year== 2002)
filter(gapminder, continent=="Africa" & year== 2002)
africa = filter(gapminder, continent=="Africa" & year== 2002)
sum(africa$pop)
arrange(gapminder, lifeExp)
x = arrange(gapminder, lifeExp)
select(x, country, year)[1]
select(x, country, year)[1,]
x = arrange(gapminder, desc(pop))
x
select(x, country, year)[1,]
x = arrange(gapminder, desc(lifeExp))
select(x, country)[1:3,]
y = group_by(gapminder, country)
summarise(y, meanpop = mean(pop))
x = summarise(y, meanpop = mean(pop))
z = arrange(x, meanpop)
z[1:3]
z[1:3,]
z = arrange(x, desc(meanpop))
z[1:3,]
x = select(gapminder, year==2002)
x = select(gapminder, year==2002)
select(gapminder, year==2002)
select(gapminder, year == 2002)
select(gapminder, year == 2002)
arrange(gapminder, gdpPercap)
select(gapminder, year == 2002)
y = select(gapminder, year == 2002)
x = arrange(y, desc(gdpPerCap))
names(gapminder)
y = filter(gapminder, year == 2002)
x = arrange(y, desc(gdpPerCap))
x = arrange(y, desc(gdpPercap))
x[1:10]
x = arrange(y, desc(gdpPercap))
x
x[1:10,]
x[1:10,1]
x = arrange(gapminder, desc(lifeExp))
x
gr = group_by(gapminder, country)
summarise(gr, meanlife = mean(lifeExp))
g = summarise(gr, meanlife = mean(lifeExp))
x = arrange(gapminder, desc(meanlife))
g = summarise(gr, meanlife = mean(lifeExp))
x = arrange(g, desc(meanlife))
select(x, country)[1:3,]
install.packages("hms")
library("hms")
library("readxl")
library("lubridate")
library("gapminder")
library("tidyverse")
library("ggplot2")
setwd("~/Desktop/iXperience/DataScienceGreen/2. R code")
my_df <- data.frame(A = c(1:10), B = seq(22, 4, by= -2))
my_df
ggplot(my_df, aes(x=A, y=B)) +
geom_point()
ggplot(gapminder, aes(x=gdpPercap, y=lifeExp)) +
geom_point()
ggplot(gapminder, aes(x=gdpPercap, y=lifeExp)) +
geom_point() +
scale_x_log10()
dt = filter(gapminder, country=="India")
ggplot(dt, aes(x=gdpPercap, lifeExp)) + geom_point()
ggplot(dt, aes(x=gdpPercap, lifeExp)) + geom_point() + scale_x_log10()
ggplot(dt, aes(x=gdpPercap, y=lifeExp)) + geom_point() + scale_x_log10()
ggplot(gapminder, aes(x=gdpPercap, y=lifeExp, color=continent)) +
geom_point() +
scale_x_log10()
gapminder2007 <- filter(gapminder, year==2007)
ggplot(gapminder2007, aes(x=gdpPercap, y=lifeExp, color=continent)) +
geom_point() +
scale_x_log10()
ggplot(gapminder2007, aes(x=gdpPercap, y=lifeExp, color=continent )) +
geom_point(shape=16, size=2) +
scale_x_log10()
ggplot(data=gapminder2007, aes(x=gdpPercap, y=lifeExp, color=pop)) +
geom_point() +
scale_x_log10()
ggplot(data=gapminder2007, aes(x=gdpPercap, y=lifeExp, color=log10(pop))) +
geom_point() +
scale_x_log10()
ggplot(data=gapminder2007, aes(x=gdpPercap, y=lifeExp, size=pop)) +
geom_point() +
scale_x_log10()
ggplot(data=gapminder2007, aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) +
geom_point()+
scale_x_log10()
ggplot(data=gapminder2007, aes(x=gdpPercap, y=lifeExp, shape=continent)) +
geom_point() +
scale_x_log10() +
scale_shape(solid = FALSE)
ggplot(filter(gapminder, country=="China"), aes(x=gdpPercap, y=lifeExp)) +
geom_line()
ggplot(filter(gapminder, country=="China"), aes(x=gdpPercap, y=lifeExp)) +
geom_line() +
geom_point() # problem? it had no parentheses eariler.
p <- ggplot(filter(gapminder, country=="China"), aes(x=gdpPercap, y=lifeExp))
p + geom_line(color="lightblue") + geom_point(color="red")
p + geom_point(color="red") + geom_line(color="lightblue")
p + geom_line() + geom_point(aes(color=year))
p + geom_line() + geom_point() + aes(color=year)
gap_continent <- gapminder %>% group_by(year,continent)  %>% summarise(mean_lifeExp = mean(lifeExp))
ggplot(gap_continent, aes(x=year, y=mean_lifeExp, colour=continent)) +
geom_line() + geom_point()
p + geom_line(aes(color=year)) + geom_point()
p + geom_line() + geom_point(aes(color=year))
ggplot(data=gapminder2007, aes(x=lifeExp)) +
geom_histogram()
ggplot(data=gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=5)
ggplot(data=gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=1)
ggplot(data=gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=1)
ggplot(data=gapminder2007, aes(x=lifeExp)) +
geom_histogram(aes(fill=continent), binwidth = 1, alpha=0.65, position="identity")
ggplot(data=gapminder2007, aes(x=lifeExp)) +
geom_density( aes(fill=continent), alpha=0.5)
ggplot(data=gapminder2007, aes(x=continent)) +
geom_bar() +
aes(fill=continent)
ggplot(gapminder2007, aes(x=gdpPercap, y=lifeExp, colour=continent)) +
geom_point() +
scale_x_log10() +
facet_grid(~continent)
ggplot(gapminder, aes(x=gdpPercap, y=lifeExp)) +
geom_point() +
scale_x_log10() +
aes(color=continent) +
facet_wrap(~ year)
ggplot(gapminder2007, aes(x=gdpPercap, y=lifeExp, colour=continent)) +
geom_point() +
scale_x_log10() +
facet_wrap(~continent)
ggplot(gapminder, aes(x=gdpPercap, y=lifeExp)) +
geom_point() +
scale_x_log10() +
aes(color=continent) +
facet_wrap(~ year)
myplot <- ggplot(data=gapminder2007, aes(x=lifeExp, y=gdpPercap, color=continent)) +
geom_point() +
labs(x='Life expectancy', y=NULL, title='GDP vs Life expectancy', color='Continent: ') +
theme_classic()
myplot
myplot <- ggplot(data=gapminder2007, aes(x=lifeExp, y=gdpPercap, color=continent)) +
geom_point() +
labs(x='Life expectancy', y=NULL, title='GDP vs Life expectancy', color='Continent: ') +
theme_classic()
# or just put it all together using "+"
myplot
myplot <- ggplot(gapminder2007, aes(y=lifeExp, x=gdpPercap, fill=country, size=sqrt(pop))) +
geom_point(shape=21) +
scale_x_log10() +
scale_fill_manual(values=country_colors) +
facet_wrap(~continent) +
scale_size_continuous(range=c(1, 20)) +
guides(fill=FALSE, size=FALSE)
myplot
ggplot2(gapminder, country=="South Africa", aes(y=lifeExp, x=year)) + geom_point()
ggplot(gapminder, country=="South Africa", aes(y=lifeExp, x=year)) + geom_point()
ggplot(filter(gapminder, country=="South Africa"), aes(y=lifeExp, x=year)) + geom_point()
ggplot(gapminder, aes(y=lifeExp, x=year, color=continent)) + geom_point()
ggplot(gapminder, aes(y=lifeExp, x=year)) + geom_point(aes(color=continent))
ggplot(gapminder, aes(y=lifeExp, x=year)) + geom_line(aes(color=continent))
ggplot(gapminder, aes(y=lifeExp, x=year, color=continent)) + geom_line()
ggplot(gapminder, aes(y=lifeExp, x=year, color=continent)) + geom_line()
ggplot(gapminder, aes(y=lifeExp, x=year, color=continent)) + geom_point()
ggplot(gapminder, aes(y=mean(gdpPercap), x=year, color=continent)) + geom_point()
ggplot(gapminder, aes(y=gdpPercap, x=year, color=continent)) + geom_point()
sum(gapminder$gdpPercap*gapminder$pop)/sum(gapminder$pop)
gapminder$gdpPercap*gapminder$pop
sum(gapminder$gdpPercap*gapminder$pop)
sum(gapminder$pop)
gapminder$pop
sum(gapminder$pop)
sum(gapminder$gdpPercap*gapminder$pop)/sum(as.numeric(gapminder$pop))
gapminder$pop
sum(gapminder$pop)
ggplot(gapminder, aes(y=(sum(gdpPercap*pop)/sum(pop)), x=year, color=continent)) + geom_point()
sum(gapminder$gdpPercap*gapminder$pop)/sum(gapminder$pop)
group_by(gapminder, continent, year) %>% summarize(mean_gdpPercap = mean(gdpPercap)) %>%
ggplot(aes(x=year, y=mean_gdpPercap, color=continent)) +
geom_point() +
geom_line() +
ylab("Average GDP per Head") +
xlab("Year") +
ggtitle("GDP per Head by Continent") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(diamonds, aes(x = caret, y = price, colour=color)) + geom_line() + geom_point()
diamonds
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_line() + geom_point()
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point()
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point()
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5, position=stacked)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5, position=stack)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5, position=dodge)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5, position="dodge")
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5, position="identity")
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5, position="stack")
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5) + facet_grid(.~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.5) + facet_wrap(.~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.35) + facet_wrap(.~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.25) + facet_wrap(.~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.15) + facet_wrap(.~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.15)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.20)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) + geom_point(alpha=0.20) + facet_wrap(.~color)
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point(alpha=0.20) + facet_wrap(.~color) + labs(title="Price vs Carat by Diamond Color")
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point(alpha=0.20) + facet_wrap(.~color) + labs(title="Price vs Carat by Diamond Color") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point(alpha=0.20) + facet_wrap(.~color) + labs(x = "Carat", y = "Price", title="Price vs Carat by Diamond Color") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point(alpha=0.20) + labs(x = "Carat", y = "Price", title="Price vs Carat by Diamond Color") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(diamonds, aes(x = carat, y = price, colour = color)) +
geom_point(alpha=0.20) + labs(x = "Carat", y = "Price", title="Price vs Carat by Diamond Color") +
theme(plot.title = element_text(hjust = 0.5)) + facet_wrap(.~color)
