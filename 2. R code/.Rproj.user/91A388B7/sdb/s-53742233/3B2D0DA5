{
    "collab_server" : "",
    "contents" : "\n# =====================================================================================================================\n#   Intro to Data manipulation                                                                                              \n#   Taryn Morris                                                                                                                  \n#   iXperience 2019 - Green\n# =====================================================================================================================\n\n\n##### GOOD CODING PRACTICE #####\n\n# 1) Title your code \n# 2) Load your packages upfront\n# 3) Set your working directory --> BUT PROJECTS ARE WAY BETTER\n# 4) annotate your code - better for sharing and for memory\n# 5) Make use of sections (4 consecutive ---- or #### or ====)\n# 6) Use either lowercase or camelCase naming conventions. If needed use under_scores. \n# 7) Indentations can help make code more readable (Rstudio often does this for you).\n# 8) Spaces help make code readable. And donâ€™t change the function.\n\n\n\n# LIBRARIES -----------------------------------------------------------------------------------------------------------\n\n# To install a package use the command install.packages () (OR ...)\n# You only need to install packages once (like downloading an app)\n# notice the inverted commas. The command wont work without them - try it and see.\ninstall.packages(\"tidyverse\") \ninstall.packages(\"nycflights13\")\ninstall.packages(\"lubridate\")\n#install the package \"nycflights13\" \n\n\n# Load packages from library \n# You have to load packages every session - like opening the app you downloaded to use its functions\nlibrary(tidyverse)\nlibrary(nycflights13)  #you can read about it here if you need (https://github.com/hadley/nycflights13)\nlibrary(lubridate)\n\n\n# WORKING DIRECTORY ---------------------------------------------------------------------------------------------------\n\n#You can set the place to find your files and folder using setwd()\nsetwd(\"~/Desktop/iXperience/DataScienceGreen/2. R code\")\n# or navigate there via \"files\", \" more options\"\n  \n#BUT - NOW USE PROJECTS!\n#BETTER OPTION!!!\n\n\n\n\n\n# LETS GET TO IT  ---------------------------------------------------------------------------------------------------\n\n#look at the inbuilt \"flights\" dataset from the nycflights13 package\nflights     # it tells us flights is a \"tibble\" with 336 776 rows and 19 columns\n\n#tibbles automatically display the first 10 rows of data but if you want to see more use print()\nprint(flights, n=20)\n   \n\n# you can still use all base R functions but answers displayed as tibbles, which can be very useful \n# try these commands we learnt in \"Base R\"\n\nhead(flights)\n\nflights[2, 1]\nflights[, 1]\nflights[1, ]\nflights[-2, ]\nflights[, -1]\nflights[c(1,5,7), ]\nflights[, c(1,2)]\nflights[flights$month==\"12\", c(10,9)]\nsubset(flights, arr_delay > 0)\ngapminder[,year] # does this work?\n\n  \n# Remember - there is no 1 right way to get an answer. Whether you use base R, or Tidy R commands, or a little bit of each\n# it's all good. You will soon find what works for you and what's quickest for you! (which is probably tidyr)\n\n\n\n\n# Manipulating data with tidyr  ---------------------------------------------------------------------------------------------------\n\n# -----  1) SELECT -----\n\n#select() selects columns we want\nflights_want <- select(flights, carrier, origin, year, month, day, hour, minute, dep_delay, arr_delay) \n#               select(data, columns)\n# read this as ... make an object called flights_want by taking the flights dataframe and selecting the columns  carrier, origin ...)\nflights_want\nselect(flights, carrier)\n# how about removing a column we dont want?\nflights_dont_want <- select(flights, -year)\nflights_dont_want\n\n#there are several helper elements we can use in the select() function - \n#(especially useful when working with biiiiiig datasets)\n #   - starts_with()\n #   - ends_with()\n #   - contains()\n #   - matches()       - matches a regular expression\n #   - num_range()\n #   - one_of()        - exclude/include columns from list of names\n #   - everything().\n\n# select a few columns and put everything else after (ie change order)\nflights_some <- select(flights, carrier, tailnum, year, month, day, everything()) \n\n\n\n# select the columns carrier, year, month, day, dep_delay, arr_delay, origin, destination, airtime, distance, time_hour   \n# AND call it flights_clean -- check it gave you the right thing!\nflights_clean = select(flights, carrier, year, month, day, dep_delay, arr_delay, origin, dest, air_time, distance, time_hour)\n\n#^^^^^\n\nnames(flights) #gives column names\n\n## 2) ARRANGE -----\n#arrange() orders the tibble according to a chosen column (think \"sort\" in excel)\nflights_sorted <- arrange(flights_clean, arr_delay) # default sort is ascending\nflights_sorted\n\nflights_sorted_bad <- arrange(flights_clean, desc(arr_delay)) # default sort is ascending\nflights_sorted_bad\n\n## 3) FILTER -----\n#filter() gives rows matching a given criteria using: ==, !=, >, >=, <, <=, &, |\nflights_AA <- filter(flights_clean, carrier = \"AA\") # gave us an error - why?\n\nflights_AA <- filter(flights_clean, carrier == \"AA\") \nflights_AA\n\nflights_AA_JFK <- filter(flights_clean, carrier == \"AA\" & origin == \"JFK\") \nflights_AA_JFK\n\nflights_AA_DL <- filter(flights_clean, carrier == \"AA\" | carrier == \"DL\") \nflights_AA_DL\n\n\n# filter the dataset for carrier MQ\nflights_MQ <- filter(flights_clean, carrier==\"MQ\")\n\n  \n# filter the dataset for carrier MQ & destination ORD\n\nflights_MQ_ORD = filter(flights_clean, carrier==\"MQ\" & dest == \"ORD\")\n###^^^ \n\n## 4) MUTATE -----\n#mutate() creates a new column (at the end of the dataframe) based on an existing column\n# lets look at arrival delay as hours rather than minutes\nflights_hours <- mutate(flights_clean, arr_delay_hours=arr_delay/60)\narrange(flights_hours, desc(arr_delay_hours))\n\n\n# add a column of flight_speed to the flights_clean data\nmutate(flights_clean, flight_speed = distance/air_time)\n\n\n#make a date column\nflights_date <- mutate(flights_clean, date = make_datetime(year, month, day))\n\n#add in day of week\nmutate(flights_date, day_of_week = wday(date, label=F))\n#what happens if we make label = T?\n\nmutate(flights_date, day_of_week = wday(date, label=T))\n\n# Use rename() to change the name of columns without mutating.\n\nflights_clean %>% rename(airline = carrier)\n\n## 5) GROUP BY and SUMMARISE -----\n#group_by() does not change the data, but is used in conjunction with summarise()\n# summarise performs a function to a group of data created with group_by()\n\n\nflights_mean_delay <- group_by(flights_clean, carrier)\nflights_mean_delay <- summarise(flights_mean_delay, mean_arr_delay = mean(arr_delay))\nflights_mean_delay\n\n\n# whats the problem\n# we didnt check our data set to look for missing values.\nflights_mean_delay <- group_by(flights_clean, carrier)\nflights_mean_delay <- summarise(flights_mean_delay, mean_arr_delay = mean(arr_delay, na.rm=T))\nflights_mean_delay\n\n\nflights_summary <- group_by(flights_clean, carrier)\nflights_summary <- summarise(flights_summary, \n                            mean_arr_delay = mean(arr_delay, na.rm=T),\n                            min_arr_delay = min(arr_delay, na.rm=T),\n                            max_arr_delay = max(arr_delay, na.rm=T))\nflights_summary\nflight_summary_sorted <- arrange(flights_summary, mean_arr_delay)\n\n\n\n## 6)  %>%  PIPING\n\n# old way to get data that you wanted was step by step (or nesting commands in commands which can get very messy)\n#e.g.   #see last example above ^^^\n\n\n# enter piping! Glorious piping!\n#remember to read piping as \"and then\"\n\nflights_sep_summary <- flights_clean %>% drop_na() %>% \n                       filter(month == 9) %>% \n                       group_by(carrier) %>%\n                       summarise(mean_arr_delay = mean(arr_delay),\n                                 min_arr_delay = min(arr_delay),\n                                 max_arr_delay = max(arr_delay)) %>% \n                       arrange(mean_arr_delay)\n\n\n#### get the mean dep_delay, for American Airlines, for each month.\n# which month had the worst delays\nworst_delay = flights_clean %>% drop_na() %>% \n  filter(carrier==\"AA\") %>% group_by(month) %>% \n  summarise(mean_dep_delay = mean(dep_delay)) %>%\n  arrange(mean_dep_delay)\nworst_delay\n\n#get the mean, min and max arrival delays for all airlines at each airport of origin\nsummary_arr = flights_clean %>% drop_na() %>% \n  group_by(origin) %>%\n  summarise(mean_arr_delay = mean(arr_delay), min_arr = min(arr_delay), max_arr = max(arr_delay))  \n\n#Which airport had the longest delay? from which airline?\narrange(summary_arr, max_arr)[3,]\n\n# how long in hours?\n\n\n\n\n## 7) GATHER AND SPREAD WIDE DATA\n# gather() takes wide data and gathers into long data\n# spread() takes long data and gatherss into wide data\n\nflights_wide <- flights_clean %>% drop_na() %>% \n  group_by(carrier, month) %>%\n  summarise(mean_arr_delay = mean(arr_delay)) \n\nflights_wide\n\nflights_wide <- flights_clean %>% drop_na() %>% \n  group_by(carrier, month) %>%\n  summarise(mean_arr_delay = mean(arr_delay)) %>% \n  spread(month, mean_arr_delay)\n\nflights_wide\n\n",
    "created" : 1562059799231.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1525939023",
    "id" : "3B2D0DA5",
    "lastKnownWriteTime" : 1562064822,
    "last_content_update" : 1562064822876,
    "path" : "~/Desktop/iXperience/DataScienceGreen/2. R code/2a. Manipulate data.R",
    "project_path" : "2a. Manipulate data.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}