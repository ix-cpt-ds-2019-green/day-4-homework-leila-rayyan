{
    "collab_server" : "",
    "contents" : "# =====================================================================================================================\n# = Reading and writing files                                                                                                       =\n# =  Taryn Morris                                                                                                                 =\n# = iXperience 2019 - Green                                                   \n# =====================================================================================================================\n\n\n# LIBRARIES -----------------------------------------------------------------------------------------------------------\n\nlibrary(readr)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\n\n# FILE SYSTEM INTERACTION ---------------------------------------------------------------------------------------------\n\n# you need to set your working directory to tell R where to find your data.\n#using the command setwd() - if you know your file paths well OR ... \n\nsetwd(\"~/Desktop/iXperience/DataScienceGreen/2. R code\")\ngetwd()\n\n#Best is to work in a project instead. # this points R to the directory in which the project sits.\n#much easier to share\n\n#Open the file sharing project now ***\n\n\nlist.files() # lists the files in the project directory\n\n\n\n# CSV FILES [READ] ----------------------------------------------------------------------------------------------------\n\n# A \"delimited file\" is one in which fields are separated by a special character. This character is generally one of\n# the following:\n#\n# * comma (\",\")\n# * semi-colon (\";\")\n# * pipe (\"|\") or\n# * white space (space or tab).\n\n# There's a suite of base R related functions for working with delimited files. Each performs a slightly different variation\n# on the same theme.\n#\n# * read.table()  - white space separator\n# * read.csv()    - \",\" separator; \".\" for decimal point\n# * read.csv2()   - \";\" separator; \",\" for decimal point\n# * read.delim()  - tab separator; \".\" for decimal point\n# * read.delim2() - tab separator; \",\" for decimal point\n#\n# Important arguments:\n# - header\n# - sep\n# - na.strings\n# - nrows\n# - skip\n# - comment.char\n# - stringsAsFactors\n\n#tidyverse also reads in files\n#read_csv \n\n### See data import cheat sheet for alllllll the commands you might need.\n\n#read.csv (baseR) and read_csv(tidyverse - more specifically readr) ultimately both achieve reading in data but\n#tidyverse option is way sleaker and more user friendly\n\n# But dont take my word for it - let's try it and see.\n\n\n### BASE R DATA IMPORT \n\nairbnb_baseR <- read.csv(\"data/airbnb_capetown.csv\")\nairbnb_baseR\n\n\n# this is quite hard to look at and get a sense of. There are several functions that can help us (from my ppt)\n\n\nclass(airbnb_baseR)\n\n#1. Look at the dataframe\nairbnb_baseR\n\n#2. look at the head of the data frame\nhead(airbnb_baseR)\n\n#3. look at the tail of the data frame\ntail(airbnb_baseR)\n\n#4. look at the names of the dataframe\nnames(airbnb_baseR)\n\n#5. look at the attributes of the dataframe????? What are attributes?\nattributes(airbnb_baseR)\n\n#6. look at the dimensions of the data frame\ndim(airbnb_baseR)\n\n#7. look at the number of columns of the dataframe\nncol(airbnb_baseR)\n\n#8. look at the number of rows of the dataframe\nnrow(airbnb_baseR)\n\n#9 look at the summary of the dataframe\nsummary(airbnb_baseR)\n\n#10 look at the structure of the dataframe\nstructure(airbnb_baseR)\n\n# With read.csv() character columns are converted to factors by default.\n# Q. Check column classes and fix.\n#    - Should name be a factor?\n#    - Should hostname be a factor?\nnames(airbnb_baseR)\nclass(airbnb_baseR$host_name)\nairbnb_baseR$host_name = as.character(airbnb_baseR)\n#we would have to fix this and change columns as factors into what they should be OR\nairbnb_baseR <- read.csv(\"data/airbnb_capetown.csv\", stringsAsFactors = F)\nstr(airbnb_baseR)\n# but now we would have to change the columns that are not factors but should be into factors.\n\n# Lets see what happens if we use tidyverse(readr package to read in a csv)\n\nairbnb_tidy <- read_csv(\"data/airbnb_capetown.csv\")\nairbnb_tidy                 \n\n#I can still get a summary \nsummary(airbnb_tidy)\n\n\n# lets do a little something to this.\nairbnb_clean <- airbnb_tidy %>% select(name, city, price)\n\n\n# CSV FILES [WRITE] ---------------------------------------------------------------------------------------------------\n\nwrite_csv(airbnb_clean, path = \"my_airbnb_data.csv\")\n\n# There are other functions in base R for writing flat files:\n#\n# - write.csv() and\n# - write.csv2().\n# - write.table()\n\n# There are also a set of functions in the readr package:\n#\n# - write_delim()\n# - write_csv() and\n# - write_tsv().\n\n\n\n# EXCELS FILES  ------------------------------------------------------------------------------------------------\n\n#very similar process for reading and writing to excel.\n# The read_excel() function will handle both XLS and XLSX files. There are lower level functions for handling specific\n# also\n# - read_xls() and\n# - read_xlsx().\n\n\n# The write_xlsx() function will write a data frame to a XLSX file.\n\n# The read_excel() function will handle both XLS and XLSX files. There are lower level functions for handling specific\n# file types:\n#\n# - read_xls() and\n# - read_xlsx().\n#\n# This function will not open a file directly from a URL.\n\n\n\n# The write_xlsx() function will write a data frame to a XLSX file.\n\n\n\n\n\n\n# RDA / RDS -----------------------------------------------------------------------------------------------------------\n\n# These are not really \"flat\" file formats, but it makes sense to talk about them now.\n# Such a file can capture one or more R objects in binary format.\n\nx <- 3\ny <- 5\n\nsave(results, x, y, file = \"a-few-variables.rda\")\nsaveRDS(x, file = \"a-single-variable.rds\")\n\n# Remove these variables from the environment.\n#\nrm(results, x, y)\n#\n# Verify that they are gone.\n\n# Load single variable (and optionally rename).\n#\nz <- readRDS(\"a-single-variable.rds\")\n\nload(\"a-few-variables.rda\")\n\n",
    "created" : 1562083442405.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2571337801",
    "id" : "6A4C8FDA",
    "lastKnownWriteTime" : 1562083334,
    "last_content_update" : 1562085285347,
    "path" : "~/Desktop/iXperience/DataScienceGreen/2. R code/2b. read and write.R",
    "project_path" : "2b. read and write.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}