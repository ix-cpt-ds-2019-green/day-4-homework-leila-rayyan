dimnames(L) <- list(Gender=c("Female","Male"),
Education=c("HS","BA","MA","PhD"))
L
sum(L)
install.packages("pracma")
library(pracma)
entries <- c(1,-1,-1,1,-3,4,   # This is a list of the entries
2,-2,-2,1,-4,5,   # in the augmented matrix.  They
1,0,1,1,-2,3,     # are split across rows to make
-2,0,-2,2,0,2)    # it easier to read.
m <- matrix(entries,nrow=4,byrow=T) # Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(1,2,-3,11,
3,6,-8,32,
-2,-1,0,-7)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)  # The reduced echelon form
entries <- c(1,2,-3,
3,6,-8,
-2,-1,0)
a <- matrix(entries,nrow=3,byrow=T) #Define the coefficient matrix a
a
b <- c(11,32,-7)
b
solve(a,b)  # Output given as a list, in order x1, x2, x3.
m <- matrix(entries,nrow=3,byrow=T)
m
entries = c(-1, 0, 0, 1, -20,
1, -1, 1, 0, 70,
0, 1, 0, -1, -25)
m <- matrix(entries,nrow=3,byrow=T)
m
rref(m)
library(pracma)
rref(m)
entries = c(3, -1, -1, 50,
-1, 3, -1, 90,
-1, -1, 3, 30)
m <- matrix(entries,nrow=3,byrow=T)
rref(m)
enries = c(1, -0.2, 60,
-0.3, 1, 40)
m <- matrix(entries,nrow=3,byrow=T)
rref(m)
enries = c(1, -0.2, 60,
-0.3, 1, 40)
m <- matrix(entries,nrow=2,byrow=T)
rref(m)
entries = c(-5, 2, 6,
3, 10, 2)
m <- matrix(entries,nrow=2,byrow=T)
rref(m)
entries = c(20, 3, 5, -26,
-2, -10, 3, -23,
1, -2, -5, -13)
m <- matrix(entries,nrow=3,byrow=T)
rref(m)
x1old <- 0   # Set initial guess for x1=0
x2old <- 0   # Set initial guess for x2=0
x3old <- 0
for(n in 1:4) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x2new
for(n in 1:4) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x2new
}
for(n in 1:4) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x2new
}
for(n in 1:4) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
x1old <- 0   # Set initial guess for x1=0
x2old <- 0   # Set initial guess for x2=0
x3old <- 0
for(n in 1:4) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
1old <- 0   # Set initial guess for x1=0
x2old <- 0   # Set initial guess for x2=0
for(n in 1:10) {
x1new <- (13 + 2*x2old)/5  # Compute new value for x1
x2new <- (-7 - x1old)/(-10) # Compute new value for x2
print(c(x1new, x2new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
}
for(n in 1:10) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
for(n in 1:10) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
x1old <- 0   # Set initial guess for x1=0
x2old <- 0   # Set initial guess for x2=0
x3old <- 0
for(n in 1:10) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
for(n in 1:4) {
x1new <- -1 + 2*x2old - 5*x3old  # Compute new value for x1
x2new <- 8 - 5*x1old + 2*x3old # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
for(n in 1:4) {
x1new <- (-1 + 2*x2old - 5*x3old)  # Compute new value for x1
x2new <- (8 - 5*x1old + 2*x3old) # Compute new value for x2
x3new <- (-1 + 10*x2old - 2*x1old)/3
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
for(n in 1:4) {
x1new <- (-1 + 2*x2old - 5*x3old)  # Compute new value for x1
x2new <- (8 - 5*x1old + 2*x3old) # Compute new value for x2
x3new <- ((-1 + 10*x2old - 2*x1old)/3)
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
x1old <- 0   # Set initial guess for x1=0
x2old <- 0   # Set initial guess for x2=0
x3old <- 0
for(n in 1:4) {
x1new <- (-1 + 2*x2old - 5*x3old)  # Compute new value for x1
x2new <- (8 - 5*x1old + 2*x3old) # Compute new value for x2
x3new <- ((-1 + 10*x2old - 2*x1old)/3)
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
x1old <- 0   # Set initial guess for x1=0
x2old <- 0   # Set initial guess for x2=0
x3old <- 0
for(n in 1:4) {
x1new <- ((8 - x2old + 2*x3old)/5)  # Compute new value for x1
x2new <- ((-1 - 2*x1old - 3*x3old)/(-10)) # Compute new value for x2
x3new <- ((-1 - x1old + 2*x2old)/(5))
print(c(x1new, x2new, x3new))  # Print out new values
x1old <- x1new # Transfer new to old to compute next x1
x2old <- x2new # Transfer new to old to compute next x2
x3old <- x3new
}
x2 <- 0   # Set initial guess for x2=0
x3 <- 0   # Set initial guess for x3=0
# (No need to guess for x1.)
# The first 10 iterations
for(n in 1:4) {
x1 <- -1 + 2*x2 - 5*x3  # Compute new value for x1
x2 <- (8 - 5*x1 + 2*x3)  # Compute new value for x2
x3 <- (-1 + 10*x2 - 2*x1)/3  # Compute new value for x3
print(c(x1, x2, x3))  # Print out new values
}
x2 <- 0   # Set initial guess for x2=0
x3 <- 0   # Set initial guess for x3=0
# (No need to guess for x1.)
# The first 10 iterations
for(n in 1:4) {
x1 <- (-1 + 2*x2 - 5*x3)  # Compute new value for x1
x2 <- (8 - 5*x1 + 2*x3)  # Compute new value for x2
x3 <- ((-1 + 10*x2 - 2*x1)/3)  # Compute new value for x3
print(c(x1, x2, x3))  # Print out new values
}
x2 <- 0   # Set initial guess for x2=0
x3 <- 0   # Set initial guess for x3=0
# (No need to guess for x1.)
# The first 10 iterations
for(n in 1:4) {
x1 <- ((8 - x2 + 2*x3)/5)  # Compute new value for x1
x2 <- ((-1 - 2*x1 - 3*x3)/(-10))  # Compute new value for x2
x3 <- ((-1 - x1 + 2*x2)/(5))  # Compute new value for x3
print(c(x1, x2, x3))  # Print out new values
}
entries <- c(29, 18, 112,
3, 25, 81,
4, 6, 26)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(-1, 2, -10,
4, 8, -8,
-3, -7, 7)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(2, 1, 0, 6, -3, -1)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(3, 1, 0,
5, -2, -1,
4, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(-3, 2, 1, 1, -1. -1, 5, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
entries <- c(-3, 2, 1,
1, -1, -1,
5, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(1, -3, -1, -2, 6, -3)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(1, 3, 4, 2, 5, 8, -1, 4, 6)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(7,5, 1, -3, -13, 2)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(3, 0, 2, -1, 4, 4, 2, 1, 7)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(3, 1, 0, 5, -2, -1, 4, -4, -3)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(8, 1, 0, -1, -3, 2)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(-1, 3, 1, 4, -3, -1, 3, 0, 5)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(4, 3, -5, -1, 5, 7, 3, -2,-7)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(6, -9, -4, 6)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(2, -1, 0, 1, 0, 1, -3, 4, 5)
m <- matrix(entries,nrow=3,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
entries <- c(1, -2, 0, -3, 3, 2, 1, 6)
m <- matrix(entries,nrow=2,byrow=T)
m
rref(m)
library("pracma")
A <- matrix(c(1,3,2,4,2,-1,0,3,5),nrow=3,byrow=T)
A
B <- matrix(c(7,-3,2,0,4,5,2,-1,-4),nrow=3,byrow=T)
B
A + B
B - A
A %*% B  # Not A * B!
A
t(A)
entries <- c(1,-2,1,
-3,7,-6,
2,-3,0)
A <- matrix(entries,nrow=3,byrow=T)
A
inv(A)
A %*% inv(A)
round(A %*% inv(A))  # Fix the round-off
solve(A)
library("pracma")
entries <- c(-3,1,2,
6,2,-5,
9,5,-6)
A <- matrix(entries,nrow=3,byrow=T)
A
lu(A)
A <- matrix(c(.65, .2, .35, .8),nrow=2,byrow=T)
A
x <- c(1,0)
x
for (i in 1:10) { # start with 10 iterations
x <- A %*% x
print(x)
}
x <- c(1,0) # reset initial state vector
x <- c(1,0) #initial state
x
x <- c(1,0) # reset initial state vector
for (i in 1:20) { # 20 iterations
x <- A %*% x
print(x)
}
A <- matrix(c(.1, .9, .15, .85),nrow=2,byrow=T)
A
A <- matrix(c(.1, .15, .9, .85),nrow=2,byrow=T)
A
x <- c(1,0) #initial state
x
for (i in 1:6) { # start with 10 iterations
x <- A %*% x
print(x)
}
library("pracma", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
entries <- c(1, -2, 2, 0, -2, 5, -7, 0)
m <- matrix(entries,nrow=2,byrow=T) #Define the augmented matrix m
m  # Print out m
rref(m)
library("pracma")
entries = c(0,0,6,0,19,11,-27,
3,12,9,-6,26,31,-63,
1,4,3,-2,10,9,-17,
-1,-4,-4,2,-13,-11,22)
m <- matrix(entries,nrow=4,byrow=T)
m
ncol(m) # The number of columns of m
Rank(m)   # The rank of m
nullspace(m) # Basis for null space, given as matrix
ncol(nullspace(m)) # The nullity
entries <- c(1,1,2,-5,0,
4,4,-5,2,-8,
0,2,-1,0,6,
3,-1,1,4,5,
5,3,2,-4,7)
m <- matrix(entries,nrow=5,byrow=T)
m
det(m)
m <- matrix(c(0,1,1,1,0,1,1,1,0), nrow=3, byrow=TRUE) # sample matrix
eigen(m)  # The eigenvalues and eigenvectors
m
eigen(m)  # The eigenvalues and eigenvectors
a1 = c(-3, 1, -2, 9, -2, 2, 4, -7, 1)
m <- matrix(a1,nrow=3,byrow=T)
m
det(m)
a2 = c(1, -3, -2, 3, 9, 2, 6, 4, -1)
m <- matrix(a2,nrow=3,byrow=T)
m
det(m)
a3 = c(1, 1, -3, 3, -2, 9, 2, -7, 4)
m <- matrix(a3,nrow=3,byrow=T)
m
det(m)
a = c(1, 1, -2, 3, -2, 2, 6, -7, -1)
m <- matrix(a,nrow=3,byrow=T)
m
det(m)
a = c(3, 0, 2, 0, 3, 2, 2, 3, 1)
m <- matrix(a,nrow=3,byrow=T)
m
det(m)
a2 = c(3, 1, 2, 0, 3, 2, 2, -4, 1)
m <- matrix(a2,nrow=3,byrow=T)
m
det(m)
scalingfactor <- function(v) {
if (abs(max(v)) >= abs(min(v))) {
return(max(v))
} else {
return(min(v))
}
}
m <- matrix(c(3,-1,2,3,-1,6,-2,2,-2), nrow=3, byrow=TRUE) # sample matrix
m
x <- c(1,1,1)  # The initial vector
for (i in 1:20){
s <- scalingfactor(m %*% x)
x <- (m %*% x)/s
print(c("Eigenvalue: ",s))
print(c("Eigenvector:",x))
}
eigen(m)
eigen(m)$values[1]  # Gives dominant eigenvalue
eigen(m)$vectors[,1]/scalingfactor(eigen(m)$vectors[,1])
P = eigen(m)$vectors  # define P, columns of eigenvectors
P
D = diag(eigen(m)$values)  # define D, diagonal entries of eigenvalues
D
P %*% D %*% solve(P)
update.packages(ask = FALSE, checkBuilt = TRUE)
'Hello World!'
print('Hello World!')
print("Welcome to R")
number_type <- 23
number_type   # just run the name of the object
print(number_type) #use the print() function
class(number_type)
decimals_type <- 23.754643
class(decimals_type)
2 + 2
4 - 9
3*2
7/2
a <- 7
b <- 2
a/b
round(a/b, 0)
pi
round(pi, 2)
-a
a^2
b^2
b^3
b**3
"We use character strings to represent text"
text1 <- 'Hello'
text1
text2 <- "World!"
text2
class(text2)
statement <- c("What", "is", "up", ?)
statement <- c("What", "is", "up", "?")
statement # is this what we wanted
statement_together <- cat("What", "is", "up", "?")
statement_together <- cat("What", "is", "up", "?", fill=FALSE)
statement_together <- cat("What", "is", "up", "?", fill=TRUE)
statement_together <- cat("What", "is", "up", "?", fill="")
statement_together <- cat("What", "is", "up", "?", fill=TRUE)
names <- c("Taryn", "Neil", "Diana", "Kenny", "Connor")
class(names)
country <- c( "SA", "SA", "Spain", "USA", "Canada")
SA_local <- c(T, T, F, F, F)
class(SA_local)
age <- c(21, 25, 27, 29, 31)
class(age)
gender <- c("F", "M", "F", "M", "M")
class(gender)
gender <- as.factor(c("F", "M", "F", "M", "M"))
class(gender)
role <- as.factor(c("Teacher", "Teacher", "TA", "TA", "TA"))
class(role)
country <- c( "SA", "SA", "DR Congo", "USA", "Canada")
names
teacher_country <- cbind(names, country) # column bind
teacher_country
teacher_country <- rbind(names, country) # row bind
teacher_country
matrix(c(1,2,3,4,5,6,7,8,9,10), nrow=2, ncol=5)
best_teachers <- data.frame(names, country, age, dogs, gender, role, stringsAsFactors = FALSE)
dogs <- c(0, 2, 0, 1, 1)
best_teachers <- data.frame(names, country, age, dogs, gender, role, stringsAsFactors = FALSE)
class(best_teachers)
best_teachers
best_teachers[5,3]
best_teachers[3, ]
best_teachers[ ,2]
best_teachers[ ,3:5]
best_teachers[ ,c(1,3:5)]
best_teachers[-1 ,] # maybe we fired taryn
best_teachers[ ,-5] # maybe we dont think gender is a binary factor
best_teachers$names
best_teachers$role
best_teachers[1,4] <- 1   # taryn got a puppy. Woo hoo!
best_teachers
setwd("~/Desktop/iXperience/DataScienceGreen")
setwd("~/Desktop/iXperience/DataScienceGreen")
